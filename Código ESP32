//Definición de librerías a utilizar 
#include <Arduino.h>
#include <stdint.h>
#include <config.h>
#include <Wire.h>
#include <Adafruit_NeoPixel.h>

#define PIN  23
#define NUMPIXELS  16
Adafruit_NeoPixel pixels(NUMPIXELS, PIN, NEO_GRB);
#define LM75_ADDRESS 0x48
#define TEMPERATURE_REFERENCE 29.0
int previousTemperature = 0; 
int boton = 0; 
int boton2 = 0; 

// Declaración de funciones
void Strobe(byte red, byte green, byte blue, int StrobeCount, int FlashDelay, int EndPause);
void showStrip();
void colorWipe(byte red, byte green, byte blue, int SpeedDelay);
void colorWipeReverse(byte red, byte green, byte blue, int SpeedDelay);
void setPixel(int Pixel, byte red, byte green, byte blue);
void setAll(byte red, byte green, byte blue);

void setup() {
  Wire.begin();
  Serial2.begin(9600);
  Serial.begin(9600);
  pixels.begin(); 
  pixels.clear();
  pixels.setBrightness(255);

  Strobe(173, 216, 230, 3, 200, 500);
  setAll(173, 216, 230);  // Color celeste
  pixels.show();
  delay(1000);
  // Apagar todos los LEDs
  pixels.clear();
  pixels.show();

}

void loop() {

boton = Serial2.read();
if (boton == 2){
  colorWipe(173, 255, 0, 47); // Rojo
  delay(1000);
  pixels.clear();
  pixels.show();

 }

if (boton == 1) {
// Función colorWipe: Barrido de colores en dirección opuesta
  colorWipeReverse(255, 0, 0, 50); // Rojo
  delay(1000);
  pixels.clear();
  pixels.show();


  Wire.beginTransmission(LM75_ADDRESS);
  Wire.write(0x00);  // Registro de temperatura del LM75
  Wire.endTransmission();

  Wire.requestFrom(LM75_ADDRESS, 2);  // Se espera la lectura de 2 bytes

  if (Wire.available() >= 2) {
    byte msb = Wire.read();  // Byte más significativo
    byte lsb = Wire.read();  // Byte menos significativo

    int rawTemperature = ((msb << 8) | lsb) >> 7;  // Conversión a temperatura en grados Celsius
    float adjustedTemperature = rawTemperature - TEMPERATURE_REFERENCE;
    char temperaturaTiva[10]; 
    dtostrf(adjustedTemperature, 4, 2, temperaturaTiva); // Convierte la temperatura en una cadena con 2 decimales
    Serial2.print(temperaturaTiva); // Envía la temperatura como una cadena al puerto serie Serial2
    Serial.print("Temperatura: ");
    Serial.print(adjustedTemperature);  // Mostrar 1 decimal para mayor precisión
    Serial.println(" grados Celsius");
    }
  }
  delay(1000);
}
  void Strobe(byte red, byte green, byte blue, int StrobeCount, int FlashDelay, int EndPause){
  for(int j = 0; j < StrobeCount; j++) {
    setAll(red, green, blue);
    pixels.show();
    delay(FlashDelay);
    setAll(0, 0, 0);
    pixels.show();
    delay(FlashDelay);
  }
  delay(EndPause);
}

void showStrip() {
  pixels.show();
}

void colorWipe(byte red, byte green, byte blue, int SpeedDelay) {
  for(uint16_t i = 0; i < NUMPIXELS; i++) {
    setPixel(i, red, green, blue);
    pixels.show();
    delay(SpeedDelay);
  }
}

void colorWipeReverse(byte red, byte green, byte blue, int SpeedDelay) {
  for(int i = NUMPIXELS - 1; i >= 0; i--) {
    setPixel(i, red, green, blue);
    pixels.show();
    delay(SpeedDelay);
  }
}

void setPixel(int Pixel, byte red, byte green, byte blue) {
  pixels.setPixelColor(Pixel, pixels.Color(red, green, blue));
}

void setAll(byte red, byte green, byte blue) {
  for(int i = 0; i < NUMPIXELS; i++) {
    setPixel(i, red, green, blue); 
  }
  pixels.show();
}




